{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UserRow","props","auser","boss","state","aauser","ix","onClick","zapUser","map","item","key","InputNewuserText","className","labelpre","type","size","value","fldid","onChange","event","updatNewuser","labelpost","InputNewuserSelect","aopt","choices","split","name","InputNewuserCbox","checked","App","bind","submitNewuser","targetprop","val","target","options","selectedIndex","console","log","o","this","setState","taauser","ress","newuserResa","newuserResb","newuserResc","push","newuserSid","newuserFrst","newuserLast","newuserActy","resetNew","preventDefault","splice","aau","onSubmit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e537230a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction UserRow(props) {\n    var auser = props.boss.state.aauser[props.ix];\n    if (props.ix > 0) {\n        //assert [0] is dummy 0, replace /w zapUser button\n        auser[0] = (\n            <button onClick={() => {\n                    props.boss.zapUser(props.ix); }}>X</button>\n        );\n    }\n    return (\n        <tr>\n            {auser.map((item, ix) => (\n                <td key={ix}>{item}</td>\n            ))}\n        </tr>\n    );\n}\n\nfunction InputNewuserText(props) {\n    return (\n        <div className=\"formel\">\n            {props.labelpre}\n            <input\n                type=\"text\"\n                size=\"22\"\n                value={props.boss.state['newuser' + props.fldid]}\n                onChange={(event) => {\n                    props.boss.updatNewuser(event, 'value', props.fldid);\n                }}\n            />\n            {props.labelpost}\n        </div>\n    );\n}\n\nfunction InputNewuserSelect(props) {\n    var aopt = props.choices.split('|');\n    return (\n        <div className=\"formel\">\n            {props.labelpre}\n            <select\n                name={props.fldid}\n                value={props.boss.state['newuser' + props.fldid]}\n                onChange={(event) => {\n                    props.boss.updatNewuser(event, 'select', props.fldid);\n                }}\n            >\n                {aopt.map((item, ix) => (\n                    <option key={ix} value={item}>\n                        {item}\n                    </option>\n                ))}\n            </select>\n            {props.labelpost}\n        </div>\n    );\n}\n\nfunction InputNewuserCbox(props) {\n    return (\n        <div className=\"formel\">\n            {props.labelpre}\n            <input\n                type=\"checkbox\"\n                name=\"trCb\"\n                checked={props.boss.state['newuser' + props.fldid]}\n                onChange={(event) => {\n                    props.boss.updatNewuser(event, 'checked', props.fldid);\n                }}\n            />\n            {props.labelpost}\n        </div>\n    );\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.updatNewuser = this.updatNewuser.bind(this);\n        this.submitNewuser = this.submitNewuser.bind(this);\n        this.zapUser = this.zapUser.bind(this);\n    }\n    updatNewuser(event, targetprop, fldid) {\n        var val =\n            targetprop === 'select'\n                ? event.target.options[event.target.selectedIndex].value\n                : event.target[targetprop];\n        console.log('uNu(%o,%s,%s) val=%s', event, targetprop, fldid, val);\n        var o = {};\n        o['newuser' + fldid] = val;\n        this.setState(o);\n    }\n    submitNewuser(event) {\n        var taauser = this.state.aauser;\n        var ress = '';\n        if (this.state.newuserResa) ress += 'a';\n        if (this.state.newuserResb) ress += 'b';\n        if (this.state.newuserResc) ress += 'c';\n        taauser.push([\n            0, //dummy\n            this.state.newuserSid,\n            this.state.newuserFrst,\n            this.state.newuserLast,\n            this.state.newuserActy,\n            ress,\n        ]);\n        this.resetNew(taauser);\n        //return false ;\n        event.preventDefault();\n    }\n    zapUser(ix) {\n        var taauser = this.state.aauser;\n        taauser.splice(ix, 1);\n        this.setState({ aauser: taauser });\n    }\n    resetNew(aau) {\n        this.setState({\n            //clear new-user fields ...\n            newuserSid: '',\n            newuserFrst: '',\n            newuserLast: '',\n            newuserActy: 'Hiking',\n            newuserResa: false,\n            newuserResb: false,\n            newuserResc: false,\n            //and update or init array of array of users:\n            aauser: aau,\n        });\n    }\n    componentWillMount() {\n        this.resetNew([['Remove', 'SID','FirstName', 'LastName', 'Activity', 'Restrictions']]);\n    }\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.submitNewuser}>\n                    <InputNewuserText boss={this} key=\"Sid\" fldid=\"Sid\" labelpre=\"Student ID\" />\n                    <InputNewuserText boss={this} key=\"Frst\" fldid=\"Frst\" labelpre=\"First Name\" />\n                    <InputNewuserText boss={this} key=\"Last\" fldid=\"Last\" labelpre=\"Last Name\" />\n                    <InputNewuserSelect\n                        boss={this}\n                        fldid=\"Acty\"\n                        labelpre=\"Select Activity\"\n                        choices=\"Hiking|Swimming|Cooking|Painting\"\n                    />\n                    <InputNewuserCbox\n                        boss={this}\n                        key=\"Resa\"\n                        fldid=\"Resa\"\n                        labelpost=\"a) Dietary Restrictions\"\n                    />\n                    <InputNewuserCbox\n                        boss={this}\n                        key=\"Resb\"\n                        fldid=\"Resb\"\n                        labelpost=\"b) Physical Disabilities\"\n                    />\n                    <InputNewuserCbox\n                        boss={this}\n                        key=\"Resc\"\n                        fldid=\"Resc\"\n                        labelpost=\"c) Medical Needs\"\n                    />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                <table>\n                    <tbody>\n                        {this.state.aauser.map((item, ix) => (\n                            <UserRow key={ix} ix={ix} boss={this} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}